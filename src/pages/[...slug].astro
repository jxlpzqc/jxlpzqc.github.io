---
import type { GetStaticPaths } from "astro";
import PostsList from "@layouts/PostsList.astro";
import { getAllFsItems, type FileSystemItem } from "@utils/filesystem";
import type { CollectionEntry } from "astro:content";
import Post from "@layouts/Post.astro";
import Symlink from "@layouts/Symlink.astro";

export type Props = {
    type: "file" | "dir";
    blog?: CollectionEntry<"blog">;
    file?: FileSystemItem;
};

export const getStaticPaths = (async () => {
    const IGNORE_LIST = ["/"];
    const items = await getAllFsItems();

    return items
        .filter((x) => x.absPath && !IGNORE_LIST.includes(x.absPath))
        .map((item) => ({
            params: {
                slug: item.absPath!!,
            },
            props: {
                type: item.type,
                blog: item.collectionObject,
                file: item,
            },
        }));
}) satisfies GetStaticPaths;

const { type, blog, file } = Astro.props;

const { slug } = Astro.params;

let currentPath = slug ? (slug.startsWith("/") ? slug : "/" + slug) : "/";

if (file?.type !== "dir") {
    currentPath = currentPath.substring(0, currentPath.lastIndexOf("/"));
}
---

{
    type === "dir"
        ? file && <PostsList path={currentPath} file={file} />
        : type === "file"
          ? blog && file && <Post path={currentPath} post={blog} file={file} />
          : file && <Symlink path={currentPath} file={file} />
}
