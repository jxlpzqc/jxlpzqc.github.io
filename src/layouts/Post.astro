---
import ShellPage from "./ShellPage.astro";
import type { CollectionEntry } from "astro:content";
import type { FileSystemItem } from "@utils/filesystem";

import {normalize} from "path";
import { Image } from "astro:assets";

export type Props = {
    post: CollectionEntry<"blog">;
    path: string;
    file: FileSystemItem;
};

const { post, file, path } = Astro.props;

const { Content } = await post.render();

const formatDate = (date: Date) => {
    // format as 2021-01-01
    return date.toISOString().split("T")[0];
};

const metaDate =
    formatDate(post.data.pubDate) +
    (post.data.updatedDate
        ? `, updated on ${formatDate(post.data.updatedDate)}`
        : "");

let imageUrl :any;

if (post.data.heroImage) {
    if (post.data.heroImage.startsWith("http")) {
        imageUrl = post.data.heroImage
    } else if (post.data.heroImage.startsWith("/")) {
        imageUrl = post.data.heroImage
    } else {
        const path = normalize("/src/content/blog/" + post.id.substring(
            0,
            post.id.lastIndexOf("/") + 1
        ) + post.data.heroImage).replace(/\\/g, "/");

        const images = import.meta.glob('/src/content/**/*.{svg,jpeg,jpg,png,gif}');
        
        if (!images[path]) {
            console.error("[WARN] Image not found: " + path);
        } else {
            imageUrl = images[path]();
        }
    }
}


---

<ShellPage currentPath={path} command={"cat " + file.absPath}>
    <div class="command-result mb-8 mt-4" id="init-content" data-init-type="file">
        {
            post.data.heroImage && (
                <Image
                    src={imageUrl}
                    alt={post.data.title}
                    class="w-full max-h-64 object-cover rounded-lg my-4"
                />
            )
        }

        <h1 class="text-5xl font-bold flex-1">
            {post.data.title}
        </h1>
        <!-- article meta -->
        <dl class="meta-list">
            <dt>Date</dt>
            <dd>{metaDate}</dd>
            {
                post.data.tags && post.data.tags.length > 0 && (
                    <>
                        <dt>Tags</dt>
                        <dd class="space-x-2">
                            {post.data.tags.map((tag) => (
                                <a
                                    href={`/tags/${tag}`}
                                    class="text-term-blue hover:underline"
                                >
                                    {tag}
                                </a>
                            ))}
                        </dd>
                    </>
                )
            }
            {
                post.data.description && (
                    <>
                        <dt>Description</dt>
                        <dd class="!col-start-1 !col-span-2">{post.data.description}</dd>
                    </>
                )
            }
        </dl>

        <div class="my-4 flex gap-4 flex-wrap text-sm">
            <button class="btn-primary hidden-in-less" data-command="less">
                Pipe to less (C-h)
            </button>
            <button class="btn-primary hidden-in-less" data-command="copylink" data-link={file.absPath}>
                Copy link
            </button>
        </div>

        <article role="article" class="prose prose-gray dark:prose-invert prose-lg max-w-screen-md prose-h1:text-4xl">
            <Content />
        </article>
    </div>
</ShellPage>
